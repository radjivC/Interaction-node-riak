// Generated by CoffeeScript 1.6.3
(function() {
  var Client;

  Client = require('catbox').Client;

  exports.createCacheClient = function(client, options) {
    var cache;
    options = {
      engine: 'redis',
      partition: 'zukai'
    };
    cache = new Client(options);
    cache.start(function() {});
    return {
      cache: cache,
      getBuckets: function(callback) {
        return client.getBuckets(callback);
      },
      getBucket: function(params, callback) {
        return client.getBucket(params, callback);
      },
      setBucket: function(params, callback) {
        return client.setBucket(params, callback);
      },
      getKeys: function(params, streaming, callback) {
        return client.getKeys(params, streaming, callback);
      },
      put: function(params, callback) {
        return client.put(params, callback);
      },
      get: function(params, callback) {
        var key;
        key = {
          segment: 'get',
          id: "" + params.bucket + "-" + params.key
        };
        return cache.get(key, function(err, cached) {
          if (cached) {
            console.log('0a', cached);
            return callback(err, cached.item);
          } else {
            return client.get(params, function(reply) {
              var v;
              console.log(0, key, reply);
              try {
                v = JSON.stringify(reply);
              } catch (_error) {
                err = _error;
                console.log("FAIL", err);
                v = '';
              }
              return cache.set(key, v, 10000, function(err) {
                console.log(1, key, err);
                return callback(err, reply);
              });
            });
          }
        });
      },
      del: function(params, callback) {
        return client.del(params, callback);
      },
      getIndex: function(params, callback) {
        return client.getIndex(params, callback);
      }
    };
  };

  if (0) {
    exports.lruCache = function(options) {
      var LRU;
      LRU = require('lru-cache');
      options = {
        max: 500,
        length: function(n) {
          return n * 2;
        },
        dispose: function(key, n) {
          return null;
        },
        maxAge: 1000 * 60 * 60
      };
      return LRU(options);
    };
    exports.memcacheClient = function(options) {
      return lruCache(options);
    };
    exports.redisClient = function(options) {
      return lruCache(options);
    };
    exports.createCacheClient = function(client, cache) {
      return {
        get: function() {
          return null;
        },
        del: function() {
          return null;
        },
        getKeys: function() {
          return null;
        },
        put: function() {
          return null;
        },
        mapred: function() {
          return null;
        },
        getIndex: function() {
          return null;
        }
      };
    };
  }

}).call(this);
