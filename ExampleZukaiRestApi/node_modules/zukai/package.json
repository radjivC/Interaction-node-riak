{
  "name": "zukai",
  "version": "0.1.3",
  "description": "Riak ODM",
  "homepage": "https://github.com/natural/zukai",
  "main": "lib/index.js",
  "scripts": {
    "test": "cd ./test && make",
    "prepublish": "./node_modules/coffee-script/bin/coffee -c  -o ./lib/ ./src/*.coffee"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/natural/zukai.git"
  },
  "keywords": [
    "riak",
    "zukai",
    "odm",
    "model",
    "schema"
  ],
  "author": {
    "name": "Troy Melhase",
    "email": "troy@troy.io",
    "url": "https://github.com/natural"
  },
  "license": "Apache",
  "readmeFilename": "README.md",
  "devDependencies": {
    "coffee-script": "~1.6.1",
    "mocha": "~1.8.2"
  },
  "bugs": {
    "url": "https://github.com/natural/zukai/issues",
    "email": "troy@troy.io"
  },
  "dependencies": {
    "inflection": "~1.2.5",
    "async": "~0.2.6",
    "jsonschema": "git://github.com/tdegrunt/jsonschema.git#d3ad55c1bf0d096a2b388b016bf28cda59cc3a4f",
    "q": "~0.9.4",
    "eventemitter2": "~0.4.11",
    "underscore": "~1.5.1",
    "riakpbc": "0.0.17"
  },
  "readme": "[![Build Status](https://travis-ci.org/natural/zukai.png)](https://travis-ci.org/natural/zukai)\n[![Dependency Status](https://gemnasium.com/natural/zukai.png)](https://gemnasium.com/natural/zukai)\n[![NPM version](https://badge.fury.io/js/zukai.png)](http://badge.fury.io/js/zukai)\n\n## zukai\n[Riak](http://basho.com/riak/) ODM for [Node.js](http://nodejs.org/).\n\n\n#### Features\n\n  * Uses the Riak PBC interface via [RiakPBC](https://github.com/nlf/riakpbc)\n  * Uses [jsonschema](https://github.com/tdegrunt/jsonschema) for schema definitions and [validation](http://json-schema.org/latest/json-schema-validation.html)\n  * Uses [Q](https://github.com/kriskowal/q) for both Promise and conventional Node.js callbacks\n\n\n#### Contents\n\n  * [Install](#install)\n  * [Example](#example)\n  * [Plugins](#plugins)\n  * [Hooks](#hooks)\n  * [Events](#events)\n  * [API](#api)\n  * [Changelog](#changelog)\n  * [About](#about)\n  * [License](#license)\n\n\n<a id=\"install\"></a>\n#### Install\n\nInstallation is easy.  Add `--save` to the end of the install to update\nyour project `package.json`.\n\n```sh\n$ npm install zukai\n```\n\n\n<a id=\"example\"></a>\n#### Example\n\n```coffee\n{createClient} = require 'riakpbc'\n{createModel} = require 'zukai'\n\nBook = createModel\n  name: 'Book'\n  bucket: 'books'\n  connection: createClient()\n  schema:\n    properties:\n      title:\n        type: 'string'\n        required: true\n\nbell = Book.create title: 'For Whom the Bell Tolls'\nbell.put (err)->\n  console.log 'saved'\n```\n\n\n<a id=\"plugins\"></a>\n#### Plugins\n\nPlugins are reusable components for Models.  Plugins\ntypically modify the Model schema, install [hooks](#hooks), or both.  This\nexample adds a new property named `author`:\n\n```coffee\nauthorPlugin = (model, options)->\n  model.schema.properties.author =\n    type: 'string'\n    required: true\n\nBooks.plugin authorPlugin\n```\n\n\n<a id=\"hooks\"></a>\n#### Hooks\n\nHooks are functions that are called at various points in the life cycle of\nobjects.\n\nPre- and post-create hooks are called synchronously and are passed only one\nvalue, the object.  All other hooks are called asynchronously and are passed two\nvalues, the object and the continuation callback.  Asynchronous hooks must call\nthe continuation callback (i.e., `next()`) to continue processing the operation,\nand may indicate an error by supplying a value, e.g., `next(my_error)`.\n\n\n###### `Model.pre('create', callback)`\n\nPre-create hooks run after a new object is created and default properties are\nset but before the object document is validated.  Example:\n\n```coffee\nBook.pre 'create', (object)->\n  object.doc.title = object.doc.title.toUpperCase()\n```\n\n###### `Model.post('create', callback)`\n\nPost-create hooks run after the object document is validated but before the\nobject is returned from the `create` function.\n\n###### `Model.pre('del', callback)`\n\nPre-delete hooks run before the object is removed from the bucket.  If a hook\nindicates an error (by calling `next()` with a value), the object will not be\nremoved and the promise will be rejected.\n\n###### `Model.post('del', callback)`\n\nPost-delete hooks run after the object is successfully removed from the bucket\nbut before the `del` event is emitted and before the promise is resolved.  Any\nerror produced by a post-delete hook will cause the promise to be rejected.\n\n###### `Model.pre('put', callback)`\n\nPre-put hooks run before the object is put to the bucket.  If the hook indicates\nan error, the object will not be saved.  Example:\n\n```coffee\nBook.pre 'put', (object, next)->\n  object.doc.title = object.doc.title.toUpperCase()\n  next()\n```\n\n###### `Model.post('put', callback)`\n\nPost-put hooks run after the object is successfully saved to the bucket but\nbefore the `put` event is emitted and before the promise is resolved.  Any error\nproduced by a post-put hook will cause the promise to be rejected.\n\n\n<a id=\"events\"></a>\n#### Events\n\nModels emit events using\n[EventEmitter2](https://github.com/hij1nx/EventEmitter2).  The value passed to\neach event is the model object.\n\nOptions for the event emitter are passed in via `options.events` to the\n`createModel` function.  For example, to enable wildcard events, you would\ndefine your model like this:\n\n```coffee\nTalker = createModel\n  name: 'Talker'\n  events:\n    wildcard: true\n```\n\n###### `create`\n\nThe `create` event is emitted after the object has been fully instantiated and\nvalidated and after all of the post-create hooks have run.\n\n###### `del`\n\nThe `del` event is emitted after the object is removed from the bucket and\nafter all post-delete hooks have run.\n\n###### `put`\n\nThe `put` event is emitted after the object is put to the bucket and after all\npost-save hooks have run.\n\n\n<a id=\"API\"></a>\n#### API\n\n###### `zukai.createModel([name], definition)`\n\nFactory function that creates a new Model.\n\n  * `name` optional string, the name of the model\n\nThe `definition` object should have keys thusly:\n\n  * `name`, required string (if first parameter is missing), the name of the model\n  * `bucket`, optional, the name of the Riak bucket from which to read and write\n  objects; if omitted, the bucket name will be the pluralized form of the model name\n  * `connection`, optional for create (but required for most operations), an instance\n  of the RiakPBC client\n  * `schema`, optional, JSON schema\n  * `indexes`, optional, a function that returns an array of indexes included in\n  the `put()` call\n\n\n###### `zukai.ProtoModel`\n\nPrototypical model used to create other models via the `createModel` function\ndescribed above.  You can change any property or function on this object to\neffect all models created (but you shouldn't really have to, either).\n\n\n###### `Model.create([key], [values])`\n\nStatic method that creates and returns an object of the given Model.\n\n  * `key`, optional string, if given will be the key for the object\n  within the bucket\n  * `values`, optional object, properties to set on the model object\n\n\n###### `Model.get([key], [options], [callback])`\n\nStatic method that reads the value at the given key from the model's bucket.\nReturns a promise.\n\n  * `key`, required string if not present in `options`, string, the key to read\n  * `options`, optional object, passed to the connection `get` call\n  * `callback`, optional function, called with `(error, object)` after read\n  is complete.\n\n\n###### `object.put([options], [callback])`\n\nStatic method to save the object document to the model's bucket.  Returns a\npromise.\n\n  * `options`, optional object, passed to the connection `put` call\n  * `callback`, optional function, called with `(error)` after save\n  is complete.\n\n\n###### `object.del([options], [callback])`\n\nDeletes the model object from the model's bucket.  Returns a promise.\n\n  * `options`, optional object, passed to the connection `del` call\n  * `callback`, optional function, called with `(error)` after delete is\n    complete.\n\n\n###### `object.link(tag, [target])`\n\nReturns links associated with this object that match the tag and bucket.\n\n  * `tag` required string, the link name to retrieve\n  * `target` optional string, the name of the bucket to filter retrieved links\n\nThe return value will be a link description or an array of link descriptions if\nmore than one link matches.\n\n\n###### `object.link(tag, target, [dupes=false])`\n\nAssociates the object with the target using the given tag using links.  Pass in\na truthy value as the third argument to allow multiple links for the same\nkey/bucket/tag triple.\n\n  * `tag` required string, the name to use for the relationship\n  * `target` required model object, the object to relate to this one\n\nNote that the object is not put to the bucket after relating it to another\nobject, you have to do that explicitly.\n\nAlso note that the `target` object doesn't have to be a model instance.  Any\nobject with `key` and `bucket` attributes will work.\n\n\n###### `Model.model(name) or object.model(name)`\n\nReturns the Model object matching the given model name or bucket.  If no\nmatch is found, returns `undefined`.\n\n  * `name`, required string, the model name or bucket to match\n\n\n###### `object.walk([options], [callback])`\n\nRetrieves the model objects(s) associated with this one.  Returns a promise that\nresolves to the linked objects, or `null` if no linked objects exist.\n\n  * `options`, optional object, supply a `tag` key with the named relation, or\n    `'*'` to retrieve all related objects\n  * `callback`, optional function, called with `(err, documents)` when the walk\n    is complete\n\nThe walk function makes a map reduce request that fetches the related documents\nwith one request.\n\n\n###### `object.indexSearch(query, [callback])`\n\nMakes an index search request, using the index and parameters in the `query`\nobject.  The callback is run with `(err, keys)` when complete.  Returns a promise.\n\n  * `query`, required object, supply `qtype` and other query parameters\n  * `callback`, optional function, called when complete\n\n\n###### `object.doc`\n\nThe current model object's document.  This is the value read and written to the\nmodel's bucket.\n\n###### `object.invalid`\n\nThis attribute will be an error object if the object document failed schema\nvalidation, otherwise it will be `false`.\n\n\n###### `object.reply`\n\nThe last reply from the client connection.  This value is used internally the various\nmodel object functions (for the vector clock, etc).\n\n\n###### `object.pre(keyword, callable)`\n\nInstalls a hook to run before the given keyword.\n\n  * `keyword` required string, one of `create`, `put`, `del`\n  * `callable` required function, the hook function to run\n\n\n###### `object.post(keyword, callable)`\n\nInstalls a hook to run after the given keyword.\n\n  * `keyword` required string, one of `create`, `put`, `del`\n  * `callable` required function, the hook function to run\n\n###### `object.toJSON()`\n\nReturns an object suitable for serialization.  Unless replaced, this function\nreturns the `object.doc` value.\n\n\n###### `object.plugin(factory, options)`\n\nRuns the plugin factory, passing the Model and options objects to it.  See the\n[Plugins](#plugins) section above.\n\n\n###### `object.decode(string)`\n\nDecodes the given string into a document.  The default implementation is\n`JSON.parse`.  Replace `encode` and `decode` methods if you need to use\ndocuments that are not JSON.\n\n\n###### `object.encode(value)`\n\nEncodes the given value into a string.  The default implementation is\n`JSON.stringify`.\n\n\n###### `Model.defaultPutOptions`\n\nObject with the default values used when calling the connection `put` method.  The\nkeys and values in the object mirror the defaults in the [PBC Store Object](http://docs.basho.com/riak/latest/references/apis/protocol-buffers/PBC-Store-Object/)\ndocumentation.\n\n\n###### `Model.defaultGetOptions`\n\nObject with the default values used when calling the connection `get` method.  The\nkeys and values in the object mirror the defaults in the [PBC Fetch Object](http://docs.basho.com/riak/latest/references/apis/protocol-buffers/PBC-Fetch-Object/)\ndocumentation.\n\n\n###### `Model.defaultDelOptions`\n\nObject with the default values used when calling the connection `del` method.  The\nkeys and values in the object mirror the defaults in the [PBC Delete Object](http://docs.basho.com/riak/latest/references/apis/protocol-buffers/PBC-Delete-Object/)\ndocumentation.\n\n\n###### `Model.registry` and `object.registry`\n\nObject with all models created by the library.  Super nice for looking up models\nby name at runtime.  Used internally by the `walk` function to instantiate\nlinked values into model objects.\n\n\n###### `object.setDefaults(schema, doc)`\n\nCalled to update `doc` with default values.\n\n###### `object.getDefault(property)`\n\nCalled to get the default value from the schema property.  If the value is a\nfunction, it's called without arguments and its result is used as the default\nvalue.\n\n\n#### Changelog\n\n###### 05 June 2013 - release 0.1.1\n * minor bugfixes\n * more tests\n\n###### 01 June 2013 - release 0.1.0\n  * intial release\n\n\n#### About\n\n[As far as I can tell](http://translate.google.com/#ja/en/%E5%9B%B3%E8%A7%A3),\n\"zukai\" (図解) is a Japanese word for \"schematic\".\n\n\n#### License\n\nCopyright 2013, Troy Melhase.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis work except in compliance with the License. You may obtain a copy of the\nLicense in the LICENSE file, or at:\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed\nunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\nCONDITIONS OF ANY KIND, either express or implied. See the License for the\nspecific language governing permissions and limitations under the License.\n",
  "_id": "zukai@0.1.3",
  "dist": {
    "shasum": "03c84e90a2cf269c1d7ca91efa812a17fdbc789d",
    "tarball": "http://registry.npmjs.org/zukai/-/zukai-0.1.3.tgz"
  },
  "_from": "zukai@",
  "_npmVersion": "1.3.5",
  "_npmUser": {
    "name": "troy",
    "email": "troy@troy.io"
  },
  "maintainers": [
    {
      "name": "troy",
      "email": "troy@troy.io"
    }
  ],
  "directories": {},
  "_shasum": "03c84e90a2cf269c1d7ca91efa812a17fdbc789d",
  "_resolved": "https://registry.npmjs.org/zukai/-/zukai-0.1.3.tgz"
}
